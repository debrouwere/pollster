#!/usr/bin/env python3

import os
import random
from datetime import datetime, timedelta
import requests
import redisjobs as jobs


def traverse(obj, segments):
    if isinstance(segments, basestring):
        segments = filter(None, segments.split('.'))

    if len(segments):
        if isinstance(obj, list):
            return [traverse(item, segments) for item in obj]
        else:
            head = segments[0]
            tail = segments[1:]
            obj = obj[head]
            return traverse(obj, tail)
    else:
        return obj


def submit(feed, path, update=False):
    feed = requests.get(feed).json()
    urls = traverse(feed, path)
    board = jobs.Board(host=os.environ['JOBS_REDIS_HOST'])
    updates = 0
    for url in urls:
        for schedule in ['frequent', 'careful']:
            runner = 'pollster/' + schedule
            job_id = runner + ':' + url
            interval = int(os.environ['POLLER_' + schedule.upper() + '_INTERVAL'])
            now = datetime.today()
            jitter = timedelta(seconds=random.randint(0, 60))
            start = now + jitter
            update = board.put(
                id=job_id, 
                runner=runner, 
                payload=url, 
                seconds=interval, 
                start=start, 
                duration=int(os.environ['POLLER_DURATION']), 
                decay=float(os.environ['POLLER_DECAY']), 
                update=updated, 
                )
            updates += updated

    return updates

if __name__ == '__main__':
    # TODO: add these counts to CloudWatch (`submit` metric)
    created = submit(os.environ['ARTICLE_FEED_NX'], os.environ['ARTICLE_FEED_PATH_TO_URL'])
    updated = submit(os.environ['ARTICLE_FEED'], os.environ['ARTICLE_FEED_PATH_TO_URL'], update=True)

    print("Added {} new article polling jobs.".format(created))
    print("Updated {} existing article polling jobs.".format(updated))
