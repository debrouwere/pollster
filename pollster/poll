#!/usr/bin/env python3

import sys
import os
import time
import json
import functools
from copy import copy
from collections import namedtuple

import socialshares
import redisjobs as jobs

from utils import flatten, persistence, environment


def fetch(platforms, meta):
    persistence.to_console('polling')
    url = meta['payload']
    counts = socialshares.fetch(url, platforms, attempts=1)
    platforms = counts.keys()
    item = copy(counts)
    item['url'] = url
    item['timestamp'] = int(time.time())
    persistence.to_console('Fetched {platforms} counts for {url}', 
        platforms=', '.join(platforms), url=url)
    persistence.to_queue(flatten(item), os.environ['POLLSTER_SQS'])
    persistence.to_db(flatten(item), os.environ['POLLSTER_DYNAMODB'])
    for platform in platforms:
        persistence.to_monitor('poll', { 
            'InstanceId': environment.get_instance_id(),
            'platform': platform, 
            })

schedules = {
    'frequent': ['facebook', 'twitter'], 
    'careful': ['facebookfql', 'pinterest', 'linkedin', 'google'], 
}

if __name__ == '__main__':
    board = jobs.Board(host=os.environ['JOBS_REDIS_HOST'])
    schedule = sys.argv[1]
    platforms = schedules[schedule]
    fetcher = functools.partial(fetch, platforms)
    persistence.to_console('Start responding to {schedule} jobs', schedule=schedule)
    board.respond('pollster/' + schedule, fetcher)
