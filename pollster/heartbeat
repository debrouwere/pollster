#!/usr/bin/env python3

from utils import fleet, persistence
from datetime import datetime, timedelta
from dateutil.parser import parse as parse_date


def is_stale(alarm):
    last_update = parse_date(alarm.last_updated).replace(tzinfo=None)
    age = datetime.now() - last_update
    return age > timedelta(hours=24)

def is_alive(state):
    return state != 'failed'


def checkup():
    for unit, state in fleet.list_units():
        del unit['instance']
        if is_alive(state):
            persistence.to_monitor('heartbeat:units', n=1, dimensions=unit)

    for ip in fleet.list_machines():
        persistence.to_monitor('heartbeat:machines', dimensions={'ip': ip})


def cleanup():
    insufficient = persistence.cloudwatch.describe_alarms(
        alarm_name_prefix='pollster-blocked', 
        state_value='INSUFFICIENT_DATA', 
        )
    for alarm in insufficient:
        if is_stale(alarm):
            alarm.delete()


if __name__ == '__main__':
    checkup()
    cleanup()