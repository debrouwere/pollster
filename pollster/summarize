#!/usr/bin/env python3

import sys
import os
import time
import csvkit
from io import StringIO
from datetime import date, datetime, timedelta

from utils import persistence


fields = [
    'timestamp', 
    'url', 
    'twitter', 
    'facebook', 
    'facebookfql_likes', 
    'facebookfql_shares', 
    'facebookfql_comments', 
    'google', 
    'linkedin', 
    'reddit_ups', 
    'reddit_downs', 
    'pinterest', 
    ]


def get_counts(start, stop):
    table = persistence.Table('social-shares', connection=persistence.dynamodb)
    return table.scan(
        timestamp__between=[int(start.timestamp()), int(stop.timestamp()) - 1], 
        )

def serialize_items(items):
    buff = StringIO()
    out = csvkit.CSVKitDictWriter(buff, fields)
    out.writeheader()

    for item in items:
        out.writerow(item)

    return buff.getvalue()

def summarize_day(start):
    timer = datetime.now()

    name = start.date().isoformat() + '.csv'
    stop = start + timedelta(days=1)
    counts = list(get_counts(start, stop))
    serialized_counts = serialize_items(counts)
    print('to_file ' + str(len(counts)))
    persistence.to_file(serialized_counts, name, os.environ['POLLSTER_S3'], 'text/csv')

    duration = (datetime.now() - timer).total_seconds()
    return (name, (len(counts), duration))

def summarize(start=None, stop=None):
    if isinstance(start, str):
        start = datetime.strptime(start, '%Y-%m-%d')
    if isinstance(stop, str):
        stop = datetime.strptime(stop, '%Y-%m-%d')

    today = datetime.combine(date.today(), datetime.min.time())
    stop = stop or today
    start = start or stop - timedelta(days=1)
    duration = stop - start
    days = [start + timedelta(days=i) for i in range(duration.days)]
    return dict([summarize_day(day) for day in days])

def argv(i):
    if len(sys.argv) > i:
        return sys.argv[i]
    else:
        return None

if __name__ == '__main__':
    counts = summarize(argv(1), argv(2))
    for filename, meta in counts.items():
        count, duration = meta
        persistence.to_monitor('summarize', n=count)
        persistence.to_monitor('summarize', unit='Seconds', n=duration)
        persistence.to_console("Saved share counts to S3: {filename} ({counts} rows in {s} seconds)", 
            filename=filename, 
            counts=count, 
            s=int(round(duration)),
            )
